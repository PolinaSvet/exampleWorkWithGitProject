



Разработайте консольное приложение на языке Go, которое выполняет следующие действия:
1) Создаёт папку projectGit в ней файл main.go, который выводит строку "Hello, world!" в консоль.
2) Инициализирует репозиторий Git в новой папке со всем содержимым.
3) Создает репозиторий для этой папки и осуществляет коммит с сообщением init commit с указанием даты и времени. И создает тег v1.0.0 на коммите.
4) Программа N-раз в цикле вместо приветственной надписи "Hello, world!" файла main.go должна выводить текст, что код был изменен с указание номера изменений и даты времени данного изменения. 
На все изменения файла д.б. совершен коммит с соответствующим сообщением. И создан тег с версией проекта vX(где X-номер в цикле) на коммите.
5) Необходимо выгрузить исходный проект в папку projectGitFirs, последний проект в папку projectGitLast. 
Проект с версией (0...N) в папку projectGit_vX, где N вводится с клавиатуры и соответсует тегу коммита vX.
Запустить все выгруженные проекты и посмотреть вывод приложений.

Разработайте консольное приложение на языке Go, которое выполняет следующие действия:
Создаст простой проект, который выводит приветственную информацию "Hello, world!". 
Подключит к этому проекту версионный контроль, подготовит все файлы проекта к коммиту, сохранит их в версионный контроль, добавит метку и отправит подготовленные данные на удаленный репозиторий.
Сделает 5 изменений этого проекта, каждое изменение д.б. сохранено в версионном контроле с добавлением метки и отправлено на удаленный репозиторий.
Так же необходимо предусмотреть возможность:
- просмотра истории изменений;
- просмотреть информацию о конкретной метке;
- склонировать удаленный репозиторий на локальную машину;
- перевести состояние репозитория на то, которое соответствует определенной метке, при этом должны игнорироваться все изменения, сделанные позже этой метке.

В ответ к этому заданию добавьте ссылку на:
- удаленный репозиторий, который использовался для работы вашего приложения;
- удаленный репозиторий с исходным кодом разработанного приложения.



просмотра истории изменений(log)
Подробную информацию о конкретной метке можно получить, используя специальную команду git show, в качестве параметры в неё передаётся имя метки
Какую команду нужно выполнить, чтобы склонировать удаленный репозиторий
Какую команду нужно выполнить, что перевести состояние репозитория на то, которое соответствует коммиту 456fa34d, при этом игнорируя все изменения, сделанные позже этого коммита


1) Инициализирует репозиторий Git.
2) Создает файл main.go со следующим содержимым:
package main
import "fmt"
func main() {
    fmt.Println("Hello, world! Initial commit!")
}
3) Добавляет файл main.go в индекс Git.
4) Совершает коммит с сообщением "Initial commit".
5) Изменяет содержимое файла main.go следующим образом:
package main
import "fmt"
func main() {
    fmt.Println("Hello, world! Second commit!")
}
6) Совершает коммит с сообщением "Second commit". Создает тег v1.0.0 на коммите.
7) Выводит историю коммитов
8) Как возвращать код в одно из состояний в прошлом.